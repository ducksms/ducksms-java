/*
 * Ducksms
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ducksms.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ducksms.client.api;

import com.ducksms.client.ApiCallback;
import com.ducksms.client.ApiClient;
import com.ducksms.client.ApiException;
import com.ducksms.client.ApiResponse;
import com.ducksms.client.Configuration;
import com.ducksms.client.Pair;
import com.ducksms.client.ProgressRequestBody;
import com.ducksms.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ducksms.client.model.CreatedSmsSend;
import com.ducksms.client.model.ErrorException;
import com.ducksms.client.model.ErrorInvalidRequest;
import com.ducksms.client.model.ErrorUnauthenticated;
import com.ducksms.client.model.ErrorValidation;
import com.ducksms.client.model.PreviewSmsSend;
import com.ducksms.client.model.SmsSchema;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SmsApi {
    private ApiClient localVarApiClient;

    public SmsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SmsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for smsSend
     * @param smsSchema Create a new sms (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sms preview </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Sms created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation errors </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smsSendCall(SmsSchema smsSchema, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = smsSchema;

        // create path and map variables
        String localVarPath = "/api/v1/sms/send";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call smsSendValidateBeforeCall(SmsSchema smsSchema, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = smsSendCall(smsSchema, _callback);
        return localVarCall;

    }

    /**
     * Send Sms
     * Create a new sms
     * @param smsSchema Create a new sms (optional)
     * @return PreviewSmsSend
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sms preview </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Sms created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation errors </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public PreviewSmsSend smsSend(SmsSchema smsSchema) throws ApiException {
        ApiResponse<PreviewSmsSend> localVarResp = smsSendWithHttpInfo(smsSchema);
        return localVarResp.getData();
    }

    /**
     * Send Sms
     * Create a new sms
     * @param smsSchema Create a new sms (optional)
     * @return ApiResponse&lt;PreviewSmsSend&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sms preview </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Sms created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation errors </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PreviewSmsSend> smsSendWithHttpInfo(SmsSchema smsSchema) throws ApiException {
        okhttp3.Call localVarCall = smsSendValidateBeforeCall(smsSchema, null);
        Type localVarReturnType = new TypeToken<PreviewSmsSend>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send Sms (asynchronously)
     * Create a new sms
     * @param smsSchema Create a new sms (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sms preview </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Sms created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthenticated </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation errors </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smsSendAsync(SmsSchema smsSchema, final ApiCallback<PreviewSmsSend> _callback) throws ApiException {

        okhttp3.Call localVarCall = smsSendValidateBeforeCall(smsSchema, _callback);
        Type localVarReturnType = new TypeToken<PreviewSmsSend>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
